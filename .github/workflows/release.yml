name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.cargo-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from Cargo.toml
        id: cargo-version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f2)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          
      - name: Check version matches tag
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=${{ steps.cargo-version.outputs.version }}
          if [ "$TAG_VERSION" != "$CARGO_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi

  build:
    needs: check-version
    outputs:
      version: ${{ needs.check-version.outputs.version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: duoload-x86_64-unknown-linux-gnu
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            artifact_name: duoload-aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: duoload-x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: duoload-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: duoload-aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}-v${{ needs.check-version.outputs.version }}
          path: target/${{ matrix.target }}/release/duoload${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  docker:
    needs: [build, check-version]
    outputs:
      version: ${{ needs.check-version.outputs.version }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: duoload-*-linux-*-v${{ needs.check-version.outputs.version }}

      - name: List artifacts contents
        run: |
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          echo "Contents of Linux artifacts:"
          ls -la artifacts/duoload-*-unknown-linux-gnu-v${{ needs.check-version.outputs.version }}/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/duoload:${{ needs.check-version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/duoload:latest
          build-args: |
            VERSION=${{ needs.check-version.outputs.version }}
            TARGETARCH=${{ matrix.target == 'x86_64-unknown-linux-gnu' && 'x86_64' || 'aarch64' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: [build, docker, check-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: duoload-*-v${{ needs.check-version.outputs.version }}

      - name: Debug artifact contents
        run: |
          echo "Contents of artifacts directory:"
          ls -la artifacts/
          echo "Contents of all artifacts:"
          for dir in artifacts/duoload-*-v${{ needs.check-version.outputs.version }}; do
            echo "Contents of $dir:"
            ls -la "$dir"
          done

      - name: Verify release files exist
        run: |
          echo "Verifying release files..."
          for file in \
            "artifacts/duoload-x86_64-apple-darwin-v${{ needs.check-version.outputs.version }}/duoload" \
            "artifacts/duoload-aarch64-apple-darwin-v${{ needs.check-version.outputs.version }}/duoload" \
            "artifacts/duoload-x86_64-unknown-linux-gnu-v${{ needs.check-version.outputs.version }}/duoload" \
            "artifacts/duoload-aarch64-unknown-linux-gnu-v${{ needs.check-version.outputs.version }}/duoload" \
            "artifacts/duoload-x86_64-pc-windows-msvc-v${{ needs.check-version.outputs.version }}/duoload.exe"; do
            if [ ! -f "$file" ]; then
              echo "Error: File $file does not exist"
              exit 1
            fi
            echo "Found: $file"
          done
          echo "All release files verified successfully"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release v${{ needs.check-version.outputs.version }}
          body: |
            Release v${{ needs.check-version.outputs.version }}
            
            ## Binaries
            * Linux (AMD64): `duoload-x86_64-unknown-linux-gnu`
            * Linux (ARM64): `duoload-aarch64-unknown-linux-gnu`
            * Windows (AMD64): `duoload-x86_64-pc-windows-msvc.exe`
            * macOS (AMD64): `duoload-x86_64-apple-darwin`
            * macOS (ARM64): `duoload-aarch64-apple-darwin`

            ## Docker Images
            Docker images are available on GitHub Container Registry:
            ```bash
            # Pull specific version
            docker pull ghcr.io/${{ github.repository_owner }}/duoload:${{ needs.check-version.outputs.version }}
            
            # Pull latest version
            docker pull ghcr.io/${{ github.repository_owner }}/duoload:latest
            ```
          files: |
            artifacts/duoload-x86_64-apple-darwin-v${{ needs.check-version.outputs.version }}/duoload
            artifacts/duoload-aarch64-apple-darwin-v${{ needs.check-version.outputs.version }}/duoload
            artifacts/duoload-x86_64-unknown-linux-gnu-v${{ needs.check-version.outputs.version }}/duoload
            artifacts/duoload-aarch64-unknown-linux-gnu-v${{ needs.check-version.outputs.version }}/duoload
            artifacts/duoload-x86_64-pc-windows-msvc-v${{ needs.check-version.outputs.version }}/duoload.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
